// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package trello is a generated GoMock package.
package trello

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindBoard mocks base method.
func (m *MockRepository) FindBoard(name string) (*Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoard", name)
	ret0, _ := ret[0].(*Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoard indicates an expected call of FindBoard.
func (mr *MockRepositoryMockRecorder) FindBoard(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoard", reflect.TypeOf((*MockRepository)(nil).FindBoard), name)
}

// FindCard mocks base method.
func (m *MockRepository) FindCard(idList, name string) (*Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCard", idList, name)
	ret0, _ := ret[0].(*Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCard indicates an expected call of FindCard.
func (mr *MockRepositoryMockRecorder) FindCard(idList, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCard", reflect.TypeOf((*MockRepository)(nil).FindCard), idList, name)
}

// FindList mocks base method.
func (m *MockRepository) FindList(idBoard, name string) (*List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", idBoard, name)
	ret0, _ := ret[0].(*List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockRepositoryMockRecorder) FindList(idBoard, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockRepository)(nil).FindList), idBoard, name)
}

// GetBoards mocks base method.
func (m *MockRepository) GetBoards() (Boards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoards")
	ret0, _ := ret[0].(Boards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoards indicates an expected call of GetBoards.
func (mr *MockRepositoryMockRecorder) GetBoards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoards", reflect.TypeOf((*MockRepository)(nil).GetBoards))
}

// GetCards mocks base method.
func (m *MockRepository) GetCards(idList string) (Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", idList)
	ret0, _ := ret[0].(Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockRepositoryMockRecorder) GetCards(idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockRepository)(nil).GetCards), idList)
}

// GetLists mocks base method.
func (m *MockRepository) GetLists(idBoard string) (Lists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", idBoard)
	ret0, _ := ret[0].(Lists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockRepositoryMockRecorder) GetLists(idBoard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockRepository)(nil).GetLists), idBoard)
}

// UpdateCard mocks base method.
func (m *MockRepository) UpdateCard(updateCard UpdateCard) (*Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", updateCard)
	ret0, _ := ret[0].(*Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockRepositoryMockRecorder) UpdateCard(updateCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockRepository)(nil).UpdateCard), updateCard)
}
