// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package trello is a generated GoMock package.
package trello

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockRepository) CreateCard(createCard CreateCard) (*Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", createCard)
	ret0, _ := ret[0].(*Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockRepositoryMockRecorder) CreateCard(createCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockRepository)(nil).CreateCard), createCard)
}

// FindBoard mocks base method.
func (m *MockRepository) FindBoard(query string) (*Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoard", query)
	ret0, _ := ret[0].(*Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoard indicates an expected call of FindBoard.
func (mr *MockRepositoryMockRecorder) FindBoard(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoard", reflect.TypeOf((*MockRepository)(nil).FindBoard), query)
}

// FindBoards mocks base method.
func (m *MockRepository) FindBoards() (Boards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoards")
	ret0, _ := ret[0].(Boards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoards indicates an expected call of FindBoards.
func (mr *MockRepositoryMockRecorder) FindBoards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoards", reflect.TypeOf((*MockRepository)(nil).FindBoards))
}

// FindCard mocks base method.
func (m *MockRepository) FindCard(idList, query string) (*Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCard", idList, query)
	ret0, _ := ret[0].(*Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCard indicates an expected call of FindCard.
func (mr *MockRepositoryMockRecorder) FindCard(idList, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCard", reflect.TypeOf((*MockRepository)(nil).FindCard), idList, query)
}

// FindCards mocks base method.
func (m *MockRepository) FindCards(idList string) (Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCards", idList)
	ret0, _ := ret[0].(Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCards indicates an expected call of FindCards.
func (mr *MockRepositoryMockRecorder) FindCards(idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCards", reflect.TypeOf((*MockRepository)(nil).FindCards), idList)
}

// FindLabels mocks base method.
func (m *MockRepository) FindLabels(idBoard string) (Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLabels", idBoard)
	ret0, _ := ret[0].(Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLabels indicates an expected call of FindLabels.
func (mr *MockRepositoryMockRecorder) FindLabels(idBoard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLabels", reflect.TypeOf((*MockRepository)(nil).FindLabels), idBoard)
}

// FindList mocks base method.
func (m *MockRepository) FindList(idBoard, query string) (*List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", idBoard, query)
	ret0, _ := ret[0].(*List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockRepositoryMockRecorder) FindList(idBoard, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockRepository)(nil).FindList), idBoard, query)
}

// FindLists mocks base method.
func (m *MockRepository) FindLists(idBoard string) (Lists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLists", idBoard)
	ret0, _ := ret[0].(Lists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLists indicates an expected call of FindLists.
func (mr *MockRepositoryMockRecorder) FindLists(idBoard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLists", reflect.TypeOf((*MockRepository)(nil).FindLists), idBoard)
}

// UpdateCard mocks base method.
func (m *MockRepository) UpdateCard(updateCard UpdateCard) (*Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", updateCard)
	ret0, _ := ret[0].(*Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockRepositoryMockRecorder) UpdateCard(updateCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockRepository)(nil).UpdateCard), updateCard)
}
